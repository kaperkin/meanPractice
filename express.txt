Express

-module that lets us handle requests in a more structured way for nodejs
-handles routing, request params, etc.
-provides API

-not really required for Mongodb or node driver, but is often used

To Use:

EXAMPLE:
	//specifies dependency
	var express = require('express');
	//create express app with express module to handle routes
	var app = express();
	
Routes:
	-routes are urls that we want to support in our app
	-sometimes called endpoints
	-provides a set of instructions to trigger a set of programming
	
		
	EXAMPLE:
		app.get('/', function(request, response){
			res.send('Hello World');
		});
		
		-the '/' is the route to register
		-the callback function is the route handler
			-what will be executed when a client calls that route
		-app.get will register the route
		
		
Fall through route handler
	-will be executed it route doen't match any other ones
	-comes at end of routes file
	
	EXAMPLE:
			
		app.use(function(req, res){
			res.sendStatus(404);
		});	
		-any route not handled by app is handled here
		
Listening to client

	EXAMPLE:
	
	var server = app.listen(3000, function(){
		var port = server.address().port;
		console.log('Express app listening on port %s', port);
	})
	
	
	Get Request
		-client makes get request
		-server sends back response or error
		
	
TEMPLATES
	Documents/nodePractice/meanPractice/MongoUniversity/week_1_introduction.11a3f97c8aad/hello_world_using_templates/hello_world_templates/hello_world_templates$ 

		-a way to send back html page using templates
		-can programatically update content in template
		
	URL Parameters

	GET Parameters
	-can get params out of url with .get()

	POST Parameters
	-use express.bodyParser()

ROUTES
	-tell app where to direct user
	
	EXAMPLE
	var express = require('express');
	var posts = require('./mock/posts.json');

	var app = express();

	//here are routes//
	app.get('/', function(req, res){
		res.send("<h1>I Love Treehouse!</h1>");
	});

	app.get('/blog', function(req, res){
		res.send(posts);
	});
	//end of routes//
	app.listen(3000, function(){
		console.log("The frontend server is running on port 3000!")
	});
	
Helpful tools for DEBUGGING
	Nodemon
		-restarts node when file changes
	node-inspector
		-lets you debug node applications from a browser	
		To use:
			-run node-debug <path to app>
		-does not restart server when you change file	
			
	Can use these tools together
		-run node-inspector without params
		-run nodemon --debug <path to app>

	Setting breakpoints in file
	
		EXAMPLE
		var app = express();
		//can write a breakpoint for debugging in code such as below:
		debugger;
		app.get('/', function(req, res){
			res.send("<h1>I Love Treehouse!</h1>");
		});
		
		then run nodemon --debug-brk <path to app>


